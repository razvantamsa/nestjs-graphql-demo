Harnessing the power of TypeScript & GraphQL

GraphQL is a powerful query language for APIs and a runtime for fulfilling those queries with your existing data. 
It's an elegant approach that solves many problems typically found with REST APIs. 
For background, we suggest reading this comparison between GraphQL and REST. 
GraphQL combined with TypeScript helps you develop better type safety with your GraphQL queries, giving you end-to-end typing.

In this chapter, we assume a basic understanding of GraphQL, and focus on how to work with the built-in @nestjs/graphql module. 
The GraphQLModule can be configured to use Apollo server (with the @nestjs/apollo driver) and Mercurius (with the @nestjs/mercurius). 
We provide official integrations for these proven GraphQL packages to provide a simple way to use GraphQL with Nest. 
You can also build your own dedicated driver (read more on that here).
------------------------------------------------------------------------------------------------------------------------------------------------

Installation
Start by installing the required packages:


# For Express and Apollo (default)
$ npm i @nestjs/graphql @nestjs/apollo graphql apollo-server-express

# For Fastify and Apollo
# npm i @nestjs/graphql @nestjs/apollo graphql apollo-server-fastify

# For Fastify and Mercurius
# npm i @nestjs/graphql @nestjs/mercurius graphql mercurius fastify

WARNING
@nestjs/graphql@>=9 and @nestjs/apollo^10 packages are compatible with Apollo v3 (check out Apollo Server 3 migration guide for more details), 
while @nestjs/graphql@^8 only supports Apollo v2 (e.g., apollo-server-express@2.x.x package).
------------------------------------------------------------------------------------------------------------------------------------------------

Overview
Nest offers two ways of building GraphQL applications, the code first and the schema first methods. 
You should choose the one that works best for you. Most of the chapters in this GraphQL section are divided into two main parts: 
one you should follow if you adopt code first, and the other to be used if you adopt schema first.

In the code first approach, you use decorators and TypeScript classes to generate the corresponding GraphQL schema. 
This approach is useful if you prefer to work exclusively with TypeScript and avoid context switching between language syntaxes.

In the schema first approach, the source of truth is GraphQL SDL (Schema Definition Language) files. 
SDL is a language-agnostic way to share schema files between different platforms. 
Nest automatically generates your TypeScript definitions (using either classes or interfaces) 
based on the GraphQL schemas to reduce the need to write redundant boilerplate code.

------------------------------------------------------------------------------------------------------------------------------------------------
Getting started with GraphQL & TypeScript

Once the packages are installed, we can import the GraphQLModule and configure it with the forRoot() static method.

import { Module } from '@nestjs/common';
import { GraphQLModule } from '@nestjs/graphql';
import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';

@Module({
  imports: [
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
    }),
  ],
})
export class AppModule {}

The forRoot() method takes an options object as an argument. 
These options are passed through to the underlying driver instance (read more about available settings here: Apollo and Mercurius). 
For example, if you want to disable the playground and turn off debug mode (for Apollo), pass the following options:

import { Module } from '@nestjs/common';
import { GraphQLModule } from '@nestjs/graphql';
import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';

@Module({
  imports: [
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
      debug: false,
      playground: false,
    }),
  ],
})
export class AppModule {}